# -*- coding: utf-8 -*-
"""Tupro 1 AI Genetic Algorithm Kelompok 7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_q7qS-fnrWYEMkPsXSEFMRlzJR6PgoOw
"""

'''Genetic Algorithm untuk mencari pasangan nilai x,y sehingga fungsi h(x,y) minimum'''

#library untuk generate angka random dan random sampling
from numpy.random import rand
from numpy.random import randint

# membuat fungsi cos dan sin
pi = 3.1415926535897932384626433832795028841971  

# fungsi factorial
def f(n):  
    if n == 1 or n == 0:
        return 1
    else:
        return n * f(n - 1)

# menghitung deret taylor untuk mendapat nilai sin
def sin(x):  
    k = 0
    sinx = 0
    while x >= pi:
        x -= pi
    if pi > x > pi / 2:
        x = pi - x
    while k < 15:
        sinx += (-1)**k * x**(2*k + 1) / f(2*k + 1)
        k += 1
    return sinx

# menghitung cos
def cos(x):
    cosx = sin(pi / 2 - x)
    return cosx

# fungsi h(x,y)
def fitness(x):
	return ((cos(x[0][0]) + sin(x[0][1]))**2) / x[0][0]**2 + x[0][1]**2

# decode biner ke decimal
def decode(batas, jumlah_bits, biner):
	# hasilDecode menyimpan nilai asli x dan y beserta kromosomnya
	hasilDecode = [[0.0, 0.0], ["",""]] 
	largest = (2**jumlah_bits)-1
	# indeks ke-0 untuk decode x, index ke-1 untuk decode y
	for i in range(len(batas)):
		# extract biner
		start = i * jumlah_bits
		end = (i * jumlah_bits)+jumlah_bits
		list_biner = biner[start:end]
		# convert elemen pada list_biner yang masih terpecah menjadi satu kesatuan biner(kromosom); ex [1, 0, 0, 1] -> 1001
		kromosom = ''.join([str(s) for s in list_biner])
		# convert kromosom ke decimal(integer)
		integer = int(kromosom, 2)
		# skala untuk decimal(integer) ke range interval x dan y sehingga dihasilkan value aslinya
		value_asli = batas[i][0] + (integer/largest) * (batas[i][1] - batas[i][0])
		# simpan hasil di hasilDecode
		hasilDecode[0][i] = value_asli
		hasilDecode[1][i] = kromosom
	return hasilDecode

# membuat populasi
def population(batas, jumlah_bits, jumlah_populasi):
	# inisialisasi populasi dalam random biner
	return [randint(0, 2, jumlah_bits*len(batas)).tolist() for _ in range(jumlah_populasi)]

# pemilihan parents dengan metode tournament selection
def selection(populasi, skor, k=3):
	# selection random pertama
	selection_ix = randint(len(populasi))
	for ix in randint(0, len(populasi), k-1):
		# cek jika skor yang dihasilkan lebih minimum (lakukan tournament selection)
		if skor[ix] < skor[selection_ix]:
			selection_ix = ix
	return populasi[selection_ix]

# crossover 2 parents untuk menghasilkan 2 children
def crossover(p1, p2, peluang_cross):
	# untuk defaultnya, children mengcopy kromosom parent
	c1 = p1.copy()
	c2 = p2.copy()
	# cek untuk diperlukannya crossover atau tidak
	if rand() < peluang_cross:
		# select titik potong tetapi tidak di titik terakhir
		pt = randint(1, len(p1)-2)
		# lakukan crossover satu titik (1-point crossover)
		c1 = p1[:pt] + p2[pt:]
		c2 = p2[:pt] + p1[pt:]
	return [c1, c2]

# mutation operator (pembalikan bit biner)
def mutation(biner, peluang_mutasi):
	for i in range(len(biner)):
		# cek untuk diperlukannya mutasi atau tidak
		if rand() < peluang_mutasi:
			# balikan bit biner
			biner[i] = 1 - biner[i]

# main genetic algorithm
def genetic_algorithm(fitness, batas, jumlah_bits, max_generasi, jumlah_populasi, peluang_cross, peluang_mutasi):
	# inisialisasi populasi
	populasi = population(batas, jumlah_bits, jumlah_populasi)
	# record solusi terbaik
	best2 = 0
	best = 0
	best_eval = fitness(decode(batas, jumlah_bits, populasi[0]))
	# enumerasi generasi
	for gen in range(max_generasi):
		# decode populasi
		hasilDecode = [decode(batas, jumlah_bits, p) for p in populasi]
		# evaluasi semua kandidat pada populasi
		skor = [fitness(decimal) for decimal in hasilDecode]
		# cek solusi baru yang lebih baik
		for i in range(jumlah_populasi):
			if skor[i] < best_eval:
				best2 = best
				best = populasi[i]
				best_eval = skor[i]
				print("{:<5} {:<19} {:<19} {:<20.16f} {:<20.16f} {:6.8f}".format(gen,hasilDecode[i][1][0],hasilDecode[i][1][1],hasilDecode[i][0][0],hasilDecode[i][0][1],skor[i]))	 
		# seleksi parents
		parentsTerpilih = [selection(populasi, skor) for _ in range(jumlah_populasi)]
		# membuat generasi baru
		children = []
		for i in range(0, jumlah_populasi, 2):
			# membuat kemungkinan pasangan parents
			p1 = parentsTerpilih[i]
			p2 = parentsTerpilih[i+1]
			# crossover dan mutation
			for c in crossover(p1, p2, peluang_cross):
				# mutation
				mutation(c, peluang_mutasi)
				# simpan untuk generasi selanjutnya
				children.append(c)
		# penggantian populasi
		# decode children
		hasilDecode = [decode(batas, jumlah_bits, c) for c in children]
		# record kromosom children dengan fitness terburuk
		worst = 0
		worst2 = 0
		worst_eval = 0
		# evaluasi semua kandidat pada children
		skorWorst = [fitness(decimal) for decimal in hasilDecode]
		for i in range(jumlah_populasi):
				if skorWorst[i] > worst_eval:
					worst2 = worst
					worst = i
					worst_eval = skorWorst[i]
		# elitisme
    # penghapusan 2 kromosom terburuk children
		children.pop(worst)
		children.pop(worst2)
    # tambahkan 2 kromosom terbaik dari generasi sebelumnya
		children.append(best)
		children.append(best2)
		# pergantian generasi
		populasi = children
	return [best, best_eval]

# variabel Global
# range nilai x dan y
batas = [[-5.0, 5.0], [-5.0, 5.0]]
# maximum generasi -> pengatur jumlah looping
max_generasi = 100
# bit masing-masing kromosom x dan y
jumlah_bits = 16
# jumlah populasi
jumlah_populasi = 100
# probabilitas crossover (Pc)
peluang_cross = 0.9
# probabilitas mutasi (Pm)
peluang_mutasi = 1.0 / (float(jumlah_bits) * len(batas))

# main program
print('Hasil Genetic Algorithm')
print('Menampilkan Solusi Baru Terbaik Sampai Generasi ke-100')
print('='*98)
print("{:<5} {:<19} {:<19} {:<20} {:<20} {:<8}".format("Gen", "Kromosom(x)", "Kromosom(y)", "Nilai x", "Nilai y", "Hasil"))
print("{:<5} {:<19} {:<19} {:<20} {:<20} {:<8}".format("-"*3, "-"*16, "-"*16, "-"*20, "-"*20, "-"*10))
best, skor = genetic_algorithm(fitness, batas, jumlah_bits, max_generasi, jumlah_populasi, peluang_cross, peluang_mutasi)
print('='*98)
print('Hasil Terbaik')
hasilDecode = decode(batas, jumlah_bits, best)
print("h(%.16f, %.16f) = %.8f" %(hasilDecode[0][0], hasilDecode[0][1], skor))
print("Kromosom =  %s" %(hasilDecode[1][0]+hasilDecode[1][1]))
print("Kromosom x = %s | Nilai x = %.16f" %(hasilDecode[1][0], hasilDecode[0][0]))
print("Kromosom y = %s | Nilai y = %.16f" %(hasilDecode[1][1], hasilDecode[0][1]))